name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image (blue)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hello-gitops:blue

    - name: Build and push Docker image (green)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hello-gitops:green

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-east-1 --name hello-gitops-new

    - name: Create Namespace
      run: |
        kubectl create namespace hello-gitops || echo "Namespace already exists"

    - name: Deploy Blue
      run: kubectl apply -f deployment—blue.yaml -n hello-gitops

    - name: Test Blue Deployment
      run: |
        kubectl rollout status deployment/hello-gitops-blue -n hello-gitops --timeout=120s

    - name: Wait for LoadBalancer
      run: |
        for i in {1..30}; do
          service=$(kubectl get svc hello-gitops -n hello-gitops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [[ -n "$service" ]]; then
            echo "LoadBalancer ready: $service"
            exit 0
          fi
          echo "Waiting for LoadBalancer..."
          sleep 10
        done
        echo "Error: LoadBalancer not ready"
        exit 1

    - name: Deploy Green
      run: kubectl apply -f deployment—green.yaml -n hello-gitops

    - name: Test Green Deployment
      run: |
        kubectl rollout status deployment/hello-gitops-green -n hello-gitops --timeout=120s

    - name: Switch Traffic to Green
      run: kubectl patch service hello-gitops -n hello-gitops -p '{"spec":{"selector":{"app":"hello-gitops","version":"green"}}}'

    - name: Validate Green Deployment
      run: |
        service=$(kubectl get svc hello-gitops -n hello-gitops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        if [[ -z "$service" ]]; then
          echo "Error: LoadBalancer hostname not found."
          exit 1
        fi
        for i in {1..10}; do
          status=$(curl -o /dev/null -s -w "%{http_code}" "http://$service")
          if [[ "$status" == "200" ]]; then
            echo "Application is accessible: $service"
            exit 0
          fi
          echo "Waiting for application to be accessible..."
          sleep 10
        done
        echo "Error: Application is not accessible."
        exit 1
