name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Определить следующую версию
      run: |
        current_version=$(kubectl get svc hello-gitops -n hello-gitops-new -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "blue")
        if [[ "$current_version" == "blue" ]]; then
          next_version="green"
        else
          next_version="blue"
        fi
        echo "Building and pushing image for $next_version"
        docker build -t ${{ secrets.DOCKER_USERNAME }}/hello-gitops:$next_version .
        docker push ${{ secrets.DOCKER_USERNAME }}/hello-gitops:$next_version

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-east-1 --name hello-gitops-new

    - name: Deploy updated version
      run: |
        if [[ "$next_version" == "green" ]]; then
          kubectl apply -f deployment-green.yaml -n hello-gitops-new
        else
          kubectl apply -f deployment-blue.yaml -n hello-gitops-new
        fi

    - name: Switch traffic
      run: |
        kubectl patch svc hello-gitops -n hello-gitops-new -p "{\"spec\":{\"selector\":{\"app\":\"hello-gitops\",\"version\":\"$next_version\"}}}"
